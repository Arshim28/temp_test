server {
    listen 80;
    server_name _;  

    location ~ ^/([^/]+)(/.*)?$ {
        set $table_id $1;
        set $rest $2;

        # default_type application/x-protobuf;

        # # Handle OPTIONS preflight
        # if ($request_method = OPTIONS) {
        #     add_header 'Access-Control-Allow-Origin' '*' always;
        #     add_header 'Access-Control-Allow-Credentials' 'true' always;
        #     add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        #     add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, x-requested-with' always;
        #     return 204;
        # }

        # add_header 'Access-Control-Allow-Origin' '*' always;
        # add_header 'Access-Control-Allow-Credentials' 'true' always;
        # add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        # add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, x-requested-with' always;

        access_by_lua_block {
            local jwt = require("resty.jwt")
            local secret = "tudu"

            -- Get the token from a query parameter (adjust if using headers or cookies)
            local token = ngx.var.arg_token
            if not token then
                ngx.log(ngx.ERR, "Missing token")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local jwt_obj = jwt:verify(secret, token)
            if not jwt_obj.verified then
                ngx.log(ngx.ERR, "Token verification failed: ", jwt_obj.reason)
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local token_lid = jwt_obj.payload.lid
            if tostring(token_lid) ~= tostring(table_id) then
                ngx.log(ngx.ERR, "Token 'lid' (" .. token_lid .. ") does not match URL table_id (" .. table_id .. ")")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local current_time = ngx.time()  -- returns current time in seconds
            if current_time >= jwt_obj.payload.exp then
                ngx.log(ngx.ERR, "Token has expired")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

        }

        proxy_pass http://65.2.140.129:7800/$table_id$rest;

        
    }

    location / {
        return 200 "Hello from Dockerized Lua Proxy!\n";
    }
}
